// пример обощенного класса. Т - какой-нибудь тип данных
class Gen <T> {
	//объявление объекта с типом Т
	T ob;

	//конструктор, получающий ссылку на объекте типа Т
	Gen(T o) {
		ob = o;
	}

	//метод, возвращающий ссылку на объект 
	T getOb() {
		return ob;
	}

	//Метод, отображающий информация о типе объекта (Т)
	void showType(){
		System.out.println("Тип Т: " + ob.getClass().getName());
	}
}
class GenDemo {
	public static void main(String[] args) {
		// Cоздаем переменную класса Gem <Integer>. Все операции будут выполняться для типа данных Integer.
		Gen <Integer> iOb;
		//присваиваем ссылку на объект Integer со значением 102 
		iOb = new Gen <Integer> (182);
		//Выполнение отображение и нформации о текущем типе данных для объекта, доступного по ссылку iob
		iOb.showType();
		//получаем целое значение, хранящееся в iob
		int v = iOb.getOb();
		System.out.println("Значение: " + v);
		System.out.println(); 

		//Создаем пе5ременную класса Gen <String>
		Gen <String> strOb = new Gen<String>("Строка в качестве обощенного типа данных ");
		//Выполнение отображение и нформации о текущем типе данных для объекта, доступного по ссылку iob
                strOb.showType();
		System.out.println("Значение: " + strOb.getOb());

		//попытка присвоить переменной iOb ссылку на объект с типом Double
		//iOb = new Gen <Double> (102.0);  Компилятоггр предотвращает некорректное присваивание ссылки на объект чужого типа данных 
	
		Gen <Double> dOb = new Gen <Double> (102.0);
		// попытка присвоить ссылку на объект "чужого" типа данных блокируется компилятогр 
		//iOb = dOb
	}
}
